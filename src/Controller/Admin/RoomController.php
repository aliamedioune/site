<?php

namespace App\Controller\Admin;

use App\Entity\Admin\Room;
use App\Form\Admin\RoomType;
use App\Repository\Admin\RoomRepository;
use App\Repository\HotelRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Validator\Constraints\File;

// /**
//  * @Route("/admin/room")
//  */
class RoomController extends AbstractController
{
    /**
     * @Route("/admin/room", name="admin_room_index", methods={"GET"})
     */
    public function index(RoomRepository $roomRepository): Response
    {
        return $this->render('admin/room/index.html.twig', [
            'rooms' => $roomRepository->findAll(),
        ]);
    }

    /**
     * @Route("/admin/room/new/{id}", name="admin_room_new", methods={"GET","POST"})
     */
    public function new(Request $request,$id,HotelRepository $hotelRepository,RoomRepository $roomRepository): Response
    {
        $rooms=$roomRepository->findBy(['hotelid'=>$id]);
        $hotel=$hotelRepository->findOneBy(['id'=>$id]);
       // echo $hotel->getTitle();
       // dump($hotel);
       // die();
        $room = new Room();
        $form = $this->createForm(RoomType::class, $room);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            //************** file upload ***>>>>>>>>>>>>
            /** @var file $file */
            $file = $form['image']->getData();
            if ($file) {
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                // Move the file to the directory where brochures are stored
                try {
                    $file->move(
                        $this->getParameter('images_directory'), // in Servis.yaml defined folder for upload images
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }
                $room->setImage($fileName); // Related upload file name with Hotel table image field
            }
            //<<<<<<<<<<<<<<<<<******** file upload ***********>


            $entityManager = $this->getDoctrine()->getManager();
            $room->setHotelid($hotel->getId());
         //   $room->setHotelid($id);
            $entityManager->persist($room);
            $entityManager->flush();

            return $this->redirectToRoute('admin_room_new', ['id'=> $id]);
        }

        return $this->render('admin/room/new.html.twig', [
            'hotel' => $hotel,
            'room' => $room,
            'rooms' => $rooms,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/admin/room/{id}", name="admin_room_show", methods={"GET"})
     */
    public function show(Room $room): Response
    {
        return $this->render('admin/room/show.html.twig', [
            'room' => $room,
        ]);
    }

    /**
     * @Route("/admin/room/{id}/edit/{hid}", name="admin_room_edit", methods={"GET","POST"})
     */
    public function edit(Request $request,$hid, Room $room): Response
    {
        $form = $this->createForm(RoomType::class, $room);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            //************** file upload ***>>>>>>>>>>>>
            /** @var file $file */
            $file = $form['image']->getData();
            if ($file) {
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                // Move the file to the directory where brochures are stored
                try {
                    $file->move(
                        $this->getParameter('images_directory'), // in Servis.yaml defined folder for upload images
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }
                $room->setImage($fileName); // Related upload file name with Hotel table image field
            }
            //<<<<<<<<<<<<<<<<<******** file upload ***********>

            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('admin_room_new', ['id'=> $hid]);
        }

        return $this->render('admin/room/edit.html.twig', [
            'room' => $room,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/admin/room/{id}/{hid}", name="admin_room_delete", methods={"DELETE"})
     */
    public function delete(Request $request, $hid,Room $room): Response
    {
        if ($this->isCsrfTokenValid('delete'.$room->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($room);
            $entityManager->flush();
        }

        return $this->redirectToRoute('admin_room_new', ['id'=> $hid]);
    }


                              /////////// Room for User ///////////
    /**
     * @Route("/user/room", name="user_room_index", methods={"GET"})
     */
    public function index1(RoomRepository $roomRepository): Response
    {
        return $this->render('user/room/index.html.twig', [
            'rooms' => $roomRepository->findAll(),
        ]);
    }

    /**
     * @Route("/user/room/new/{id}", name="user_room_new", methods={"GET","POST"})
     */
    public function new1(Request $request,$id,HotelRepository $hotelRepository,RoomRepository $roomRepository): Response
    {
        $rooms=$roomRepository->findBy(['hotelid'=>$id]);
        $hotel=$hotelRepository->findOneBy(['id'=>$id]);
       // echo $hotel->getTitle();
       // dump($hotel);
       // die();
        $room = new Room();
        $form = $this->createForm(RoomType::class, $room);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            //************** file upload ***>>>>>>>>>>>>
            /** @var file $file */
            $file = $form['image']->getData();
            if ($file) {
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                // Move the file to the directory where brochures are stored
                try {
                    $file->move(
                        $this->getParameter('images_directory'), // in Servis.yaml defined folder for upload images
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }
                $room->setImage($fileName); // Related upload file name with Hotel table image field
            }
            //<<<<<<<<<<<<<<<<<******** file upload ***********>


            $entityManager = $this->getDoctrine()->getManager();
            $room->setHotelid($hotel->getId());
         //   $room->setHotelid($id);
            $entityManager->persist($room);
            $entityManager->flush();

            return $this->redirectToRoute('user_room_new', ['id'=> $id]);
        }

        return $this->render('user/room/new.html.twig', [
            'hotel' => $hotel,
            'room' => $room,
            'rooms' => $rooms,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName1()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/user/room/{id}", name="user_room_show", methods={"GET"})
     */
    public function show1(Room $room): Response
    {
        return $this->render('user/room/show.html.twig', [
            'room' => $room,
        ]);
    }

    /**
     * @Route("/user/room/{id}/edit/{hid}", name="user_room_edit", methods={"GET","POST"})
     */
    public function edit1(Request $request,$hid, Room $room): Response
    {
        $form = $this->createForm(RoomType::class, $room);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            //************** file upload ***>>>>>>>>>>>>
            /** @var file $file */
            $file = $form['image']->getData();
            if ($file) {
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                // Move the file to the directory where brochures are stored
                try {
                    $file->move(
                        $this->getParameter('images_directory'), // in Servis.yaml defined folder for upload images
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }
                $room->setImage($fileName); // Related upload file name with Hotel table image field
            }
            //<<<<<<<<<<<<<<<<<******** file upload ***********>

            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('user_room_new', ['id'=> $hid]);
        }

        return $this->render('user/room/edit.html.twig', [
            'room' => $room,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/user/room/{id}/{hid}", name="admin_room_delete", methods={"DELETE"})
     */
    public function delete1(Request $request, $hid,Room $room): Response
    {
        if ($this->isCsrfTokenValid('delete'.$room->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($room);
            $entityManager->flush();
        }

        return $this->redirectToRoute('user_room_new', ['id'=> $hid]);
    }



}